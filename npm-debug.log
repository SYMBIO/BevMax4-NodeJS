0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'serialport' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose cache add [ 'serialport', null ]
5 verbose cache add name=undefined spec="serialport" args=["serialport",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'serialport',
6 verbose parsed url   path: 'serialport',
6 verbose parsed url   href: 'serialport' }
7 silly lockFile de62b558-serialport serialport
8 verbose lock serialport /Users/venderson/.npm/de62b558-serialport.lock
9 silly lockFile de62b558-serialport serialport
10 silly lockFile de62b558-serialport serialport
11 verbose addNamed [ 'serialport', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 54883da9-serialport serialport@
14 verbose lock serialport@ /Users/venderson/.npm/54883da9-serialport.lock
15 silly addNameRange { name: 'serialport', range: '*', hasData: false }
16 verbose url raw serialport
17 verbose url resolving [ 'https://registry.npmjs.org/', './serialport' ]
18 verbose url resolved https://registry.npmjs.org/serialport
19 info trying registry request attempt 1 at 16:41:41
20 verbose etag "D59C0V5TMKX9S8W4D6W7B6YA2"
21 http GET https://registry.npmjs.org/serialport
22 http 304 https://registry.npmjs.org/serialport
23 silly registry.get cb [ 304,
23 silly registry.get   { date: 'Wed, 19 Mar 2014 20:41:42 GMT',
23 silly registry.get     server: 'Apache',
23 silly registry.get     via: '1.1 varnish',
23 silly registry.get     'last-modified': 'Wed, 19 Mar 2014 20:41:42 GMT',
23 silly registry.get     'cache-control': 'max-age=1',
23 silly registry.get     etag: '"D59C0V5TMKX9S8W4D6W7B6YA2"',
23 silly registry.get     'x-served-by': 'cache-v36-ASH',
23 silly registry.get     'x-cache': 'MISS',
23 silly registry.get     'x-cache-hits': '0',
23 silly registry.get     'x-timer': 'S1395261702.334126472,VS0,VE589',
23 silly registry.get     vary: 'Accept',
23 silly registry.get     'content-length': '0',
23 silly registry.get     'keep-alive': 'timeout=10, max=50',
23 silly registry.get     connection: 'Keep-Alive' } ]
24 verbose etag serialport from cache
25 silly addNameRange number 2 { name: 'serialport', range: '*', hasData: true }
26 silly addNameRange versions [ 'serialport',
26 silly addNameRange   [ '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.2.0',
26 silly addNameRange     '0.2.2',
26 silly addNameRange     '0.2.3',
26 silly addNameRange     '0.2.4',
26 silly addNameRange     '0.2.5',
26 silly addNameRange     '0.2.6',
26 silly addNameRange     '0.2.7',
26 silly addNameRange     '0.2.8',
26 silly addNameRange     '0.2.9',
26 silly addNameRange     '0.3.0',
26 silly addNameRange     '0.6.0',
26 silly addNameRange     '0.6.1',
26 silly addNameRange     '0.6.2',
26 silly addNameRange     '0.6.3',
26 silly addNameRange     '0.6.5',
26 silly addNameRange     '0.6.6',
26 silly addNameRange     '0.6.7',
26 silly addNameRange     '0.7.0',
26 silly addNameRange     '0.7.1',
26 silly addNameRange     '0.7.2',
26 silly addNameRange     '0.7.3',
26 silly addNameRange     '0.7.4',
26 silly addNameRange     '0.7.5',
26 silly addNameRange     '1.0.0',
26 silly addNameRange     '1.0.1',
26 silly addNameRange     '1.0.2',
26 silly addNameRange     '1.0.3',
26 silly addNameRange     '1.0.4',
26 silly addNameRange     '1.0.5',
26 silly addNameRange     '1.0.6',
26 silly addNameRange     '1.0.7',
26 silly addNameRange     '1.0.8',
26 silly addNameRange     '1.1.0',
26 silly addNameRange     '1.1.1',
26 silly addNameRange     '1.1.3',
26 silly addNameRange     '1.2.0',
26 silly addNameRange     '1.2.1',
26 silly addNameRange     '1.2.2',
26 silly addNameRange     '1.2.3',
26 silly addNameRange     '1.2.4',
26 silly addNameRange     '1.2.5',
26 silly addNameRange     '1.3.0',
26 silly addNameRange     '1.3.1' ] ]
27 verbose addNamed [ 'serialport', '1.3.1' ]
28 verbose addNamed [ '1.3.1', '1.3.1' ]
29 silly lockFile 3d4dfdc7-serialport-1-3-1 serialport@1.3.1
30 verbose lock serialport@1.3.1 /Users/venderson/.npm/3d4dfdc7-serialport-1-3-1.lock
31 silly lockFile 3d4dfdc7-serialport-1-3-1 serialport@1.3.1
32 silly lockFile 3d4dfdc7-serialport-1-3-1 serialport@1.3.1
33 silly lockFile 54883da9-serialport serialport@
34 silly lockFile 54883da9-serialport serialport@
35 silly resolved [ { name: 'serialport',
35 silly resolved     version: '1.3.1',
35 silly resolved     description: 'Welcome your robotic javascript overlords. Better yet, program them!',
35 silly resolved     author:
35 silly resolved      { name: 'Chris Williams',
35 silly resolved        email: 'voodootikigod@gmail.com',
35 silly resolved        url: 'http://www.voodootikigod.com' },
35 silly resolved     main: './serialport',
35 silly resolved     repository:
35 silly resolved      { type: 'git',
35 silly resolved        url: 'git://github.com/voodootikigod/node-serialport.git' },
35 silly resolved     maintainers: [ [Object], [Object], [Object], [Object], [Object] ],
35 silly resolved     dependencies:
35 silly resolved      { bindings: '1.1.1',
35 silly resolved        async: '0.1.18',
35 silly resolved        sf: '0.1.6',
35 silly resolved        optimist: '~0.3.4',
35 silly resolved        nan: '~0.7.0' },
35 silly resolved     devDependencies:
35 silly resolved      { mocha: '*',
35 silly resolved        chai: '*',
35 silly resolved        'sinon-chai': '*',
35 silly resolved        sinon: '*',
35 silly resolved        grunt: '*',
35 silly resolved        'grunt-cli': '*',
35 silly resolved        'grunt-mocha-test': '*',
35 silly resolved        'grunt-contrib-jshint': '*',
35 silly resolved        'sandboxed-module': '~0.3.0' },
35 silly resolved     engines: { node: '>= 0.8.0' },
35 silly resolved     bin:
35 silly resolved      { serialportlist: './bin/serialportList.js',
35 silly resolved        serialportterm: './bin/serialportTerminal.js' },
35 silly resolved     scripts: { test: 'grunt --verbose', install: 'node-gyp rebuild' },
35 silly resolved     gypfile: true,
35 silly resolved     contributors:
35 silly resolved      [ [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object],
35 silly resolved        [Object] ],
35 silly resolved     readme: '```\n  eeeee eeeee eeeee eeee       e  eeeee\n  8   8 8  88 8   8 8          8  8   "\n  8e  8 8   8 8e  8 8eee       8e 8eeee\n  88  8 8   8 88  8 88      e  88    88\n  88  8 8eee8 88ee8 88ee 88 8ee88 8ee88\n\n  eeeee eeee eeeee  e  eeeee e     eeeee eeeee eeeee eeeee\n  8   " 8    8   8  8  8   8 8     8   8 8  88 8   8   8\n  8eeee 8eee 8eee8e 8e 8eee8 8e    8eee8 8   8 8eee8e  8e\n     88 88   88   8 88 88  8 88    88    8   8 88   8  88\n  8ee88 88ee 88   8 88 88  8 88eee 88    8eee8 88   8  88\n```\n\n[![Build Status](https://travis-ci.org/voodootikigod/node-serialport.png?branch=master)](https://travis-ci.org/voodootikigod/node-serialport)\n\nVersion: 1.3.0 - Released January 15, 2014\n\n*****\n\nImagine a world where you can write JavaScript to control blenders, lights, security systems, or even robots. Yes, I said robots. That world is here and now with node-serialport. It provides a very simple interface to the low level serial port code necessary to program [Arduino](http://www.arduino.cc/) chipsets, [X10](http://www.smarthome.com/manuals/protocol.txt) wireless communications, or even the rising [Z-Wave](http://www.z-wave.com/modules/ZwaveStart/) and [Zigbee](http://www.zigbee.org/) standards. The physical world is your oyster with this goodie. For a full break down of why we made this, please read [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics).\n\n*****\n\nRobots, you say?\n================\n\nThis library is admittedly a base level toolkit for building amazing things with real world (including robots). Here are a couple of those amazing things that leverage node-serialport:\n\n* [firmata](https://github.com/jgautier/firmata) Talk natively to Arduino using the firmata protocol.\n* [tmpad](http://tmpvar.com/project/tmpad/) [source](https://github.com/tmpvar/tmpad) - a DIY midi pad using infrared, arduino, and nodejs. [Video](http://vimeo.com/34575470)\n* [duino](https://github.com/ecto/duino) - A higher level framework for working with Arduinos in node.js.\n* [Arduino Drinking Game Extravaganza](http://jsconf.eu/2011/arduino_drinking_game_extravaganza.html) - AKA "The Russian" a hexidecimal drinking game for geeks by Uxebu presented at JSConf EU 2011.\n* [Arduino controlling popcorn.js](https://gist.github.com/968773) - Controlling a popcorn.js video with an Arduino kit.\n* [Robotic JavaScript](http://jsconf.eu/2010/speaker/livingroombindmotion_function.html) - The first live presentation of the node-serialport code set as presented at JSConf EU 2010.\n* [devicestack](https://github.com/adrai/devicestack) - This module helps you to represent a device and its protocol.\n* [reflecta](https://github.com/JayBeavers/Reflecta) A communication protocol that combines Arduino Libraries and NodeJS into an integrated system.\n\nFor getting started with node-serialport, we recommend you begin with the following articles:\n\n* [Arduino Node Security Sensor Hacking](http://nexxylove.tumblr.com/post/20159263403/arduino-node-security-sensor-hacking) - A great all around "how do I use this" article.\n* [NodeBots - The Rise of JS Robotics](http://www.voodootikigod.com/nodebots-the-rise-of-js-robotics) - A survey article of why one would want to program robots in JS.\n* [Johnny-Five Getting Started Guide](https://github.com/rwldrn/johnny-five#setup-and-assemble-arduino) - Introduction to using the high level Johnny-Five library (awesome).\n\nHow To Use\n==========\n\nUsing node-serialport is pretty easy because it is pretty basic. It provides you with the building block to make great things, it is not a complete solution - just a cog in the (world domination) machine.\n\nTo Install\n----------\n\nThis assumes you have everything on your system necessary to compile ANY native module for Node.js. This may not be the case, though, so please ensure the following are true for your system before filing an issue about "Does not install". For all operatings systems, please ensure you have Python 2.x installed AND not 3.0, node-gyp (what we use to compile) requires Python 2.x.\n\n### Windows:\n\n * Windows 7 or Windows 8.1 are supported.\n * Install [Visual Studio Express 2013 for Windows Desktop](http://www.microsoft.com/visualstudio/eng/2013-downloads#d-2013-express).\n * If you are hacking on an Arduino, be sure to install [the drivers](http://arduino.cc/en/Guide/windows#toc4).\n * Install [node.js 0.10.x](http://nodejs.org/) matching the bitness (32 or 64) of your operating system.\n * Install [Python 2.7.6](http://www.python.org/download/releases/2.7.6/) matching the bitness of your operating system.  For any questions, please refer to their [FAQ](http://docs.python.org/2/faq/windows.html). Default settings are perfect.\n * Open the \'Visual Studio Command Prompt\' and add Python to the path.\n\nVisual Studio 2013 is not yet supported by node 0.10.x but the latest version of node-gyp on npm does support it.  Use the\nbelow workaround until node 0.10.x is updated.\n\n```Batchfile\n   set path=%path%;C:\\Python27\n   npm install node-gyp -g\n   git clone https://github.com/voodootikigod/node-serialport.git\n   cd node-serialport\n   node-gyp configure\n   node-gyp build\n```\n\n### Mac OS X:\n\nEnsure that you have at a minimum the xCode Command Line Tools installed appropriate for your system configuration. If you recently upgraded the OS, it probably removed your installation of Command Line Tools, please verify before submitting a ticket.\n\n### Desktop (Debian/Ubuntu) Linux:\n\nYou know what you need for you system, basically your appropriate analog of build-essential. Keep rocking!\n\n\n```\n   sudo apt-get install build-essential\n   npm install serialport\n```\n\n### Raspberry Pi Linux:\n\n * Starting with a a vanilla New Out of the Box Software (NOOBS) Raspbian image (currently tested: 5/25/2013)\n * Log into your Raspberry Pi through whatever means works best and ensure you are on a terminal prompt for the remaining steps. This could be local or through an SSH (or a serial connection if you like).\n * Issue the following commands to ensure you are up to date:\n```\n   sudo apt-get update\n   sudo apt-get upgrade -y\n```\n * Download and install node.js:\n```\n   wget http://nodejs.org/dist/v0.10.12/node-v0.10.12-linux-arm-pi.tar.gz\n   tar xvfz node-v0.10.12-linux-arm-pi.tar.gz\n   sudo mv node-v0.10.12-linux-arm-pi /opt/node/\n```\n * Set up your paths correctly:\n```\n   echo \'export PATH="$PATH:/opt/node/bin"\' >> ~/.bashrc\n   source ~/.bashrc\n```\n * Install using npm, note this will take a while as it is actually compiling code and that ARM processor is getting a workout.\n```\n   npm install serialport\n```\n\nTo Use\n------\n\nOpening a serial port:\n\n```js\nvar SerialPort = require("serialport").SerialPort\nvar serialPort = new SerialPort("/dev/tty-usbserial1", {\n  baudrate: 57600\n});\n```\n\nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following:\n\n* baudrate: Baud Rate, defaults to 9600. Must be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50.\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, 6, or 5.\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* parity: Parity, defaults to \'none\'. Must be one of: \'none\', \'even\', \'mark\', \'odd\', \'space\'\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a "data" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n\n**Note, we have added support for either all lowercase OR camelcase of the options (thanks @jagautier), use whichever style you prefer.**\n\nopen event\n----------\n\nYou MUST wait for the open event to be emitted before reading/writing to the serial port. The open happens asynchronously so installing \'data\' listeners and writing\nbefore the open event might result in... nothing at all.\n\nAssuming you are connected to a serial console, you would for example:\n\n```js\nserialPort.on("open", function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });\n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });\n});\n```\n\nYou can also call the open function, in this case instanciate the serialport with an additional flag.\n\n```js\nvar SerialPort = require("serialport").SerialPort\nvar serialPort = new SerialPort("/dev/tty-usbserial1", {\n  baudrate: 57600\n}, false); // this is the openImmediately flag [default is true]\n\nserialPort.open(function () {\n  console.log(\'open\');\n  serialPort.on(\'data\', function(data) {\n    console.log(\'data received: \' + data);\n  });\n  serialPort.write("ls\\n", function(err, results) {\n    console.log(\'err \' + err);\n    console.log(\'results \' + results);\n  });\n});\n```\n\nList Ports\n----------\n\nYou can also list the ports along with some metadata as well.\n\n```js\nvar serialPort = require("serialport");\nserialPort.list(function (err, ports) {\n  ports.forEach(function(port) {\n    console.log(port.comName);\n    console.log(port.pnpId);\n    console.log(port.manufacturer);\n  });\n});\n```\n\nParsers\n-------\n\nOut of the box, node-serialport provides two parsers one that simply emits the raw buffer as a data event and the other which provides familiar "readline" style parsing. To use the readline parser, you must provide a delimiter as such:\n\n```js\nvar serialport = require("serialport");\nvar SerialPort = serialport.SerialPort; // localize object constructor\n\nvar sp = new SerialPort("/dev/tty-usbserial1", {\n  parser: serialport.parsers.readline("\\n")\n});\n```\n\nTo use the raw parser, you just provide the function definition (or leave undefined):\n\n```js\nvar serialport = require("serialport");\nvar SerialPort = serialport.SerialPort; // localize object constructor\n\nvar sp = new SerialPort("/dev/tty-usbserial1", {\n  parser: serialport.parsers.raw\n});\n```\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n```js\nserialPort.on("data", function (data) {\n  sys.puts("here: "+data);\n});\n```\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n```js\nserialPort.write("OMG IT WORKS\\r");\n```\n\nEnjoy and do cool things with this code.\n\nReference Guide\n---------------\n\n## Methods\n\n### SerialPort (path, options, openImmediately, callback)\n\nCreate a new serial port on `path`.\n\n**_path_**\n\nThe system path of the serial port to open. For example, `/dev/tty` on Mac/Linux or `COM1` on Windows.\n\n**_options (optional)_**\n\nPort configuration options.\n\n* `baudRate`\n* `dataBits`\n* `stopBits`\n* `parity`\n* `rtscts`\n* `xon`\n* `xoff`\n* `xany`\n* `flowControl`\n* `bufferSize`\n* `parser`\n* `encoding`\n* `dataCallback`\n* `disconnectedCallback`\n\n**_openImmediately (optional)_**\n\nAttempts to open a connection to the serial port on `process.nextTick`. The default is `true`. Set to `false` to manually call `open()` at a later time.\n\n**_callback (optional)_**\n\nCalled when a connection has been opened. The callback should be a function that looks like: `function (error) { ... }`\n\n### .open (callback)\n\nOpens a connection to the given serial port.\n\n**_callback (optional)_**\n\nCalled when a connection has been opened. The callback should be a function that looks like: `function (error) { ... }`\n\n### .write (buffer, callback)\n\nWrites data to the given serial port.\n\n**_buffer_**\n\nThe `buffer` parameter accepts a [`Buffer` ](http://nodejs.org/api/buffer.html) object, or a type that is accepted by the `Buffer` constructor (ex. an array of bytes or a string).\n\n**_callback (optional)_**\n\nCalled once the write operation returns. The callback should be a function that looks like: `function (error) { ... }` _Note: The write operation is non-blocking. When it returns, data may still have not actually been written to the serial port. See `drain()`._\n\n### .pause ()\n\nPauses an open connection.\n\n### .resume ()\n\nResumes a paused connection.\n\n### .flush (callback)\n\nFlushes data received but not read. See [`tcflush()`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.\n\n**_callback (optional)_**\n\nCalled once the flush operation returns. The callback should be a function that looks like: `function (error) { ... }`\n\n### .drain (callback)\n\nWaits until all output data has been transmitted to the serial port. See [`tcdrain()`](http://linux.die.net/man/3/tcdrain) for more information.\n\n**_callback (optional)_**\n\nCalled once the drain operation returns. The callback should be a function that looks like: `function (error) { ... }`\n\n**Example**\n\nWrites `data` and waits until it has finish transmitting to the target serial port before calling the callback.\n\n```\nfunction writeAndDrain (data, callback) {\n  sp.write(data, function () {\n    sp.drain(callback);\n  });\n}\n```\n\n### .close (callback)\n\nCloses an open connection.\n\n**_callback (optional)_**\n\nCalled once a connection is closed. Closing a connection will also remove all event listeners. The callback should be a function that looks like: `function (error) { ... }`\n\n## Events\n\n### .on(\'open\', callback)\n\n### .on(\'data\', callback)\n\n### .on(\'close\', callback)\n\n### .on(\'error\', callback)\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     bugs: { url: 'https://github.com/voodootikigod/node-serialport/issues' },
35 silly resolved     homepage: 'https://github.com/voodootikigod/node-serialport',
35 silly resolved     _id: 'serialport@1.3.1',
35 silly resolved     _from: 'serialport@' } ]
36 info install serialport@1.3.1 into /Users/venderson/Desktop/arnie2
37 info installOne serialport@1.3.1
38 info /Users/venderson/Desktop/arnie2/node_modules/serialport unbuild
39 info preuninstall serialport@1.3.1
40 info uninstall serialport@1.3.1
41 verbose true,/Users/venderson/Desktop/arnie2/node_modules,/Users/venderson/Desktop/arnie2/node_modules unbuild serialport@1.3.1
42 verbose /Users/venderson/Desktop/arnie2/node_modules/.bin,[object Object] binRoot
43 info /Users/venderson/Desktop/arnie2/node_modules/serialport unbuild
44 info preuninstall serialport@1.3.1
45 info uninstall serialport@1.3.1
46 verbose true,/Users/venderson/Desktop/arnie2/node_modules,/Users/venderson/Desktop/arnie2/node_modules unbuild serialport@1.3.1
47 verbose /Users/venderson/Desktop/arnie2/node_modules/.bin,[object Object] binRoot
48 info postuninstall serialport@1.3.1
49 error Refusing to delete: /Users/venderson/Desktop/arnie2/node_modules/.bin/serialportlist not in /Users/venderson/Desktop/arnie2/node_modules/serialport
File exists: /Users/venderson/Desktop/arnie2/node_modules/.bin/serialportlist
Move it away, and try again.
50 error System Darwin 11.4.2
51 error command "node" "/usr/local/bin/npm" "install" "serialport"
52 error cwd /Users/venderson/Desktop/arnie2
53 error node -v v0.10.26
54 error npm -v 1.4.3
55 error path /Users/venderson/Desktop/arnie2/node_modules/.bin/serialportlist
56 error code EEXIST
57 verbose exit [ 1, true ]
